[debug-des-gpu-mosix]
train_data = /tmp/pycharm_project_924/data/imagenette-dummy/train
test_data = /tmp/pycharm_project_924/data/imagenette-dummy/val
num_train_items = 30
num_test_items = 30
num_workers = 12
batch_size = 128
num_target_classes = 10
persistent_caching_path = /mount-ssd/cache-dir
base_snapshot_save_path = /mount-fs/snapshot-sets
snapshot_set_string = resnet18
distribution = TOP_LAYERS
num_models = 4
approach = mosix
result_dir = /mount-fs/results/debug
benchmark_level = EXECUTION_STEPS
default_cache_location = GPU
limit_fs_io = false
ssd_caching_active = false

[debug-des-gpu-out-of-memory]
train_data = /tmp/pycharm_project_924/data/imagenette2/train
test_data = /tmp/pycharm_project_924/data/imagenette2/val
num_train_items = 200
num_test_items = 200
num_workers = 12
batch_size = 128
num_target_classes = 10
persistent_caching_path = /mount-ssd/cache-dir
base_snapshot_save_path = /mount-fs/snapshot-sets
snapshot_set_string = vit_l_32
distribution = LAST_ONE_LAYER
num_models = 4
approach = mosix
result_dir = /mount-fs/results/debug
benchmark_level = STEPS_DETAILS
default_cache_location = GPU
limit_fs_io = true
ssd_caching_active = true

# NEW RUN HERE with larger dataset to see effects of loading data from different media,
# have the suspicion that data is automatically cached in RAM even though we specify SSD as location
[des-gpu-imagenette-base]
train_data = /tmp/pycharm_project_924/data/imagenette2/train
test_data = /tmp/pycharm_project_924/data/imagenette2/val
num_train_items = -1
num_test_items = -1
num_workers = 12
batch_size = 128
num_target_classes = 10
persistent_caching_path = /mount-ssd/cache-dir
base_snapshot_save_path = /mount-fs/snapshot-sets
result_dir = /mount-fs/results/des-gpu-imagenette
limit_fs_io = true
ssd_caching_active = false


# from here on parameters we want to dynamically overwrite
distribution = TOP_LAYERS
approach = baseline
default_cache_location = GPU
snapshot_set_string = resnet18
num_models = 4
benchmark_level = EXECUTION_STEPS

[des-gpu-imagenette-base-1000]
train_data = /tmp/pycharm_project_924/data/imagenette2/train
test_data = /tmp/pycharm_project_924/data/imagenette2/val
num_train_items = 800
num_test_items = 200
num_workers = 12
batch_size = 128
num_target_classes = 10
persistent_caching_path = /mount-ssd/cache-dir
base_snapshot_save_path = /mount-fs/snapshot-sets
result_dir = /mount-fs/results/des-gpu-imagenette-1000
limit_fs_io = true
ssd_caching_active = false

# from here on parameters we want to dynamically overwrite
distribution = TOP_LAYERS
approach = baseline
default_cache_location = GPU
snapshot_set_string = resnet18
num_models = 4
benchmark_level = EXECUTION_STEPS



